// This is a comment on its own line

"use strict"; // This is the modern way of using Javascript!


# The JavaScript language - JavaScript Fundamentals
# February 14, 2024


# Variables
Most of the time, a JavaScript application needs to work with information. Here are two examples:

An online shop – the information might include goods being sold and a shopping cart.
A chat application – the information might include users, messages, and much more.
Variables are used to store this information.

# A variable
A variable is a “named storage” for data. We can use variables to store goodies, visitors, and other data.

To create a variable in JavaScript, use the let keyword.

The statement below creates (in other words: declares) a variable with the name “message”:

let message;
Now, we can put some data into it by using the assignment operator =:

let message;

message = 'Hello'; // store the string 'Hello' in the variable named message
The string is now saved into the memory area associated with the variable. We can access it using the variable name:

let message;
message = 'Hello!';

alert(message); // shows the variable content
To be concise, we can combine the variable declaration and assignment into a single line:

let message = 'Hello!'; // define the variable and assign the value

alert(message); // Hello!
We can also declare multiple variables in one line:

let user = 'John', age = 25, message = 'Hello';
That might seem shorter, but we don’t recommend it. For the sake of better readability, please use a single line per variable.

The multiline variant is a bit longer, but easier to read:

let user = 'John';
let age = 25;
let message = 'Hello';
Some people also define multiple variables in this multiline style:

let user = 'John',
  age = 25,
  message = 'Hello';
…Or even in the “comma-first” style:

let user = 'John'
  , age = 25
  , message = 'Hello';
Technically, all these variants do the same thing. So, it’s a matter of personal taste and aesthetics.

var instead of let
In older scripts, you may also find another keyword: var instead of let:

var message = 'Hello';
The var keyword is almost the same as let. It also declares a variable but in a slightly different, “old-school” way.

There are subtle differences between let and var, but they do not matter to us yet. We’ll cover them in detail in the chapter The old "var".

# A real-life analogy
We can easily grasp the concept of a “variable” if we imagine it as a “box” for data, with a uniquely-named sticker on it.

For instance, the variable message can be imagined as a box labelled "message" with the value "Hello!" in it:


# We can put any value in the box.

# We can also change it as many times as we want:

let message;

message = 'Hello!';

message = 'World!'; // value changed

alert(message);
When the value is changed, the old data is removed from the variable:


We can also declare two variables and copy data from one into the other.

let hello = 'Hello world!';

let message;

# copy 'Hello world' from hello into message 
message = hello;

# now two variables hold the same data
alert(hello); // Hello world!
alert(message); // Hello world!
Declaring twice triggers an error
A variable should be declared only once.

# A repeated declaration of the same variable is an error:

let message = "This";

// repeated 'let' leads to an error
let message = "That"; // SyntaxError: 'message' has already been declared
So, we should declare a variable once and then refer to it without let.

# Functional languages
It’s interesting to note that there exist so-called pure functional programming languages, such as Haskell, that forbid changing variable values.

In such languages, once the value is stored “in the box”, it’s there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can’t reuse the old one.

Though it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits.

// Working with variables
      // importance: 2
      // Declare two variables: admin and name.
      // Assign the value "John" to name.
      // Copy the value from name to admin.
      // Show the value of admin using alert (must output “John”).
      // solution
      // In the code below, each line corresponds to the item in the task list.

      let admin, name; // can declare two variables at once

      name = "John";

      admin = name;

      alert(admin); // "John"

      // Create a variable with the name of our planet. How would you name such a variable?
      let ourPlanetName = "Earth";
      // Create a variable to store the name of a current visitor to a website. How would you name that variable?
      let currentUser = "John";

      //   The variable for our planet
      //   That’s simple:

      //   let ourPlanetName = "Earth";
      //   Note, we could use a shorter name planet, but it might not be obvious what planet it refers to. It’s nice to be more verbose. At least until the variable isNotTooLong.

      //   The name of the current visitor
      let currentUserName = "John";
      //   Again, we could shorten that to userName if we know for sure that the user is current.

      //   Modern editors and autocomplete make long variable names easy to write. Don’t save on them.
      // A name with 3 words in it is fine.